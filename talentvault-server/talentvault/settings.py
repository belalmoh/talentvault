"""
Django settings for talentvault project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from datetime import datetime
import sys

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-y^l=w99xm(rscjj(+)nw#22^*=j)n4**#8!oien&e+!x$l#a2^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'vault.apps.VaultConfig',
    'storages',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'vault.middlewares.logging.LoggingMiddleware',
]

ROOT_URLCONF = 'talentvault.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'vault/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'talentvault.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Use SQLite for tests
if 'test' in sys.argv or 'test_coverage' in sys.argv:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': ':memory:',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.environ.get('MYSQL_DATABASE'),
            'USER': os.environ.get('MYSQL_USER'),
            'PASSWORD': os.environ.get('MYSQL_PASSWORD'),
            'HOST': os.environ.get('MYSQL_HOST'),
            'PORT': os.environ.get('MYSQL_PORT'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Logging Configuration

LOG_DIRECTORY = os.path.join(BASE_DIR, 'logs') # Define the directory where you want to save the log files
os.makedirs(LOG_DIRECTORY, exist_ok=True) # Ensure the directory exists

def get_log_filename(prefix):
    return datetime.now().strftime(f'{prefix}_logfile_%Y%m%d.log')

VAULT_LOG_FILE_PATH = os.path.join(LOG_DIRECTORY, get_log_filename('vault'))
# DJANGO_LOG_FILE_PATH = os.path.join(LOG_DIRECTORY, get_log_filename('django'))

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'vault_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': VAULT_LOG_FILE_PATH,
            'formatter': 'verbose',
        },
        # 'django_file': {
        #     'level': 'INFO',
        #     'class': 'logging.FileHandler',
        #     'filename': DJANGO_LOG_FILE_PATH,
        #     'formatter': 'verbose',
        # },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        # 'django': {
        #     'handlers': ['console', 'django_file'],
        #     'level': 'INFO',
        #     'propagate': True,
        # },
        'vault.api': {
            'handlers': ['console', 'vault_file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}


# Storage Configuration
STORAGE_TYPE = os.getenv('STORAGE_TYPE', 'local')

STORAGE_CONFIG = {
    'local': {
        'MEDIA_URL': '/media/',
        'MEDIA_ROOT': os.path.join(BASE_DIR, 'media'),
    },
    's3': {
        'AWS_ACCESS_KEY_ID': os.getenv('AWS_ACCESS_KEY_ID'),
        'AWS_SECRET_ACCESS_KEY': os.getenv('AWS_SECRET_ACCESS_KEY'),
        'AWS_STORAGE_BUCKET_NAME': os.getenv('AWS_STORAGE_BUCKET_NAME'),
        'AWS_S3_REGION_NAME': os.getenv('AWS_S3_REGION_NAME', 'us-east-1'),
        'AWS_DEFAULT_ACL': 'private',
        'AWS_S3_FILE_OVERWRITE': False,
        'AWS_S3_CUSTOM_DOMAIN': f'{os.getenv("AWS_STORAGE_BUCKET_NAME")}.s3.amazonaws.com',
    },
    'azure': {
        'AZURE_STORAGE_CONNECTION_STRING': os.getenv('AZURE_STORAGE_CONNECTION_STRING'),
        'AZURE_STORAGE_CONTAINER': os.getenv('AZURE_STORAGE_CONTAINER'),
    },
}